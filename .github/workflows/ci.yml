name: ci

on:
  pull_request:
    branches:
      - main
      - prerelease
  push:
    branches:
      - main

jobs:
  rust:
    runs-on: ubuntu-latest
    container: ubuntu:24.04
    services:
      postgres:
        image: pgvector/pgvector:pg17
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      mysql:
        image: ghcr.io/wangxiaoying/mysql:latest
        env:
          MYSQL_DATABASE: mysql
          MYSQL_ROOT_PASSWORD: mysql
          LANG: C.UTF-8
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 10s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Install tools
        run: |
          apt-get update
          apt-get install -y curl postgresql-client build-essential pkg-config libssl-dev git sqlite3 libsqlite3-dev mysql-client python3 python3-pip libkrb5-dev libclang-dev
          echo "Cache Version ${{ secrets.CACHE_VERSION }}"
        env:
          DEBIAN_FRONTEND: noninteractive

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt
          default: true

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ secrets.CACHE_VERSION }}-${{ hashFiles('**/Cargo.lock') }}

      - uses: extractions/setup-just@v3

      - name: Seed the database
        run: just seed-db
        env:
          POSTGRES_URL: "postgresql://postgres:postgres@postgres:5432/postgres"
          SQLITE_URL: "sqlite:///tmp/test.db"
          MYSQL_HOST: mysql
          MYSQL_PORT: 3306
          MYSQL_DB: mysql
          MYSQL_USER: root
          MYSQL_PASSWORD: mysql

      - name: Is the code formatted?
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check -q

      - name: Clippy linting
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --features all

      # - name: Check each feature gate
      #   run: just test-feature-gate

      - name: Run tests
        run: cargo clean && just test-ci
        env:
          POSTGRES_URL: "postgresql://postgres:postgres@postgres:5432/postgres"
          SQLITE_URL: "sqlite:///tmp/test.db"
          MYSQL_URL: "mysql://root:mysql@mysql:3306/mysql"

      - name: Test build docs
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --no-deps --features all

  python:
    runs-on: ubuntu-latest
    container: ubuntu:24.04
    strategy:
      matrix:
        python-version: ["3.13"]
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: pgvector/pgvector:pg17
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      # mysql
      mysql:
        image: ghcr.io/wangxiaoying/mysql:latest
        env:
          MYSQL_DATABASE: mysql
          MYSQL_ROOT_PASSWORD: mysql
          LANG: C.UTF-8
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 10s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
            python-version: ${{ matrix.python-version }}

      - name: Setup python env
        run: | 
          echo "$Python3_ROOT_DIR/bin" >> $GITHUB_PATH
          echo $GITHUB_PATH

      - name: Install tools
        run: |
          apt-get update
          apt-get install -y wget curl postgresql-client build-essential pkg-config libssl-dev git sqlite3 libsqlite3-dev mysql-client libmysqlclient-dev libkrb5-dev libclang-dev
        env:
          DEBIAN_FRONTEND: noninteractive

      - uses: Gr1N/setup-poetry@v9

      - uses: extractions/setup-just@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt
          default: true

      - uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-python-${{ matrix.python-version }}-${{ secrets.CACHE_VERSION }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Seed the database
        run: just seed-db
        env:
          POSTGRES_URL: "postgresql://postgres:postgres@postgres:5432/postgres"
          SQLITE_URL: "sqlite:///tmp/test.db"
          MYSQL_HOST: mysql
          MYSQL_PORT: 3306
          MYSQL_DB: mysql
          MYSQL_USER: root
          MYSQL_PASSWORD: mysql

      - name: Clippy linting
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --features all --all

      - name: Cache venv
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-${{ matrix.python-version }}-venv-${{ secrets.CACHE_VERSION }}-${{ hashFiles('connectorx-python/poetry.lock') }}

      - name: Install python dependencies
        run: just bootstrap-python

      - name: Test python
        run: just test-python
        env:
          POSTGRES_URL: "postgresql://postgres:postgres@postgres:5432/postgres"
          SQLITE_URL: "sqlite:///tmp/test.db"
          MYSQL_URL: "mysql://root:mysql@mysql:3306/mysql"
          SQLITE3_STATIC: 1
